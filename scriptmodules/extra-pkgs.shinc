
# -----------------------------------------------------------------------
# Author: 		Michael DeGuzis
# Git:		      	https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:	  	extra-pkgs.
# Script Ver:	  	0.8.3
# Description:		Module for isntalling useful pacakges otherwise not 
#			found in The Debian wheezy repositories directly.
#	
# Usage:	      	n/a , module
# -----------------------------------------------------------------------

ep_install_x360_bindings()
{
	
	echo ""
	#####################################################
	# VaporOS bindings (controller shortcuts)
	#####################################################
	# FPS + more binds from VaporOS 2
	# For bindings, see: /etc/actkbd-steamos-controller.conf
	
	# set vars
	pkg_type="deb"
	PKG="vaporos-binds-xbox360"
	PKG_FILENAME="vaporos-binds-xbox360_1.0_all.deb"
	BASE_URL="https://github.com/sharkwouter/steamos-installer/blob/master/pool/main/v/vaporos-binds-xbox360"
	BIN_LOC="/usr/bin/gdrive"
	PKG_DIR="/usr/share/doc/vaporos-binds-xbox360"
	
	# test if user requests it
	if [[ "$options" == "test" ]]; then
		# go to test function
		ep_test_deb
		exit
	fi
	
	# proceed to install eval
	ep_install_eval_binary
	
}

ep_install_firefox()
{
	#####################################################
	# Firefox (imported 20150415)
	#####################################################
	# Imported from the Linux Mint LMDE 2 repository
	# Deb binary source: deb http://packages.linuxmint.com debian import
	
	# set vars
	pkg_type="deb"
	PKG="firefox"
	PKG_FILENAME="firefox_37.0~linuxmint1+betsy_amd64.deb"
	BASE_URL="http://www.libregeek.org/SteamOS-Extra/browsers"
	BIN_LOC="/usr/bin/gdrive"
	PKG_DIR="/usr/share/doc/vaporos-binds-xbox360"
	
	# set multiflag
	multi="n"
	
	# test if user requests it
	if [[ "$options" == "test" ]]; then
		# go to test function
		ep_test_deb
		exit
	fi
	
	# proceed to install eval
	ep_install_eval_pkg
	
	#####################################
	# Pipelight integration
	#####################################
	
	# ask user if they wish to install and 
	# attempt to use pipelight
	
	echo -e "\nDo you wish to attempt to isntall and integrate Pipelight \
into Firfox Iceweasel in order to use Netflix?"

	sleep 0.3s
	read -ep "Choice: " pl_choice
	
	if [[ "$pl_choice" == "y" ]]; then
	
		# kick off build script
		echo -e "\nProceeding to pipelight isntall"
		sleep 2s
		ep_install_pipelight
		
	elif [[ "$pl_choice" == "n" ]]; then
	
		# do not kick off script
		echo -e "\nPipelight integration declined"
	fi
		
}

ep_install_plex()
{

	eromeo -e "\n==> Installing Plex Home Theater from automated script...\n"
	sleep 2s
	
	###############################
	#  vars
	###############################
	
	pkg_type=""
	
	echo -e "\n==> Configuring sources"
	sleep 1s
	
	# source lists
	reponame_plex="plex"
	reponame_deb_multi="deb-multimedia"
	
	sourcelist_plex_tmp="${reponame_plex}.list"
	sourcelist_deb_multi_tmp="${reponame_deb_multi}.list"
	sourcelist_plex="/etc/apt/sources.list.d/${reponame_plex}.list"
	sourcelist_deb_multi="/etc/apt/sources.list.d/${reponame_deb_multi}.list"
	
	prefer_plex_tmp="${reponame_plex}"
	prefer_deb_multi_tmp="${reponame_deb_multi}"
	prefer_plex="/etc/apt/preferences.d/${reponame_plex}"
	prefer_deb_multi="/etc/apt/preferences.d/${reponame_deb_multi}"
	
	###############################
	# backup
	###############################

	
	# Check for existance of /etc/apt/preferences.d/{prefer_plex} file
	if [[ -f ${prefer_plex} ]]; then
		# backup preferences file
		echo -e "\n==> Backing up ${prefer_plex} to ${prefer_plex}.bak"
		sudo mv ${prefer_plex} ${prefer_plex}.bak
		sleep 1s
	fi
	
	# Check for existance of /etc/apt/preferences.d/{prefer_deb_multi} file
	if [[ -f ${prefer_deb_multi} ]]; then
		# backup preferences file
		echo -e "\n==> Backing up ${prefer_deb_multi} to ${prefer_deb_multi}.bak"
		sudo mv ${prefer_deb_multi} ${prefer_deb_multi}.bak
		sleep 1s
	fi
	
	# check for existance of plex source list
	if [[ -f ${sourcelist_plex} ]]; then
		# backup sources list file
		echo -e "\n==> Backing up ${sourcelist_plex} to ${sourcelist_plex}.bak"
		sudo mv ${sourcelist_plex} ${sourcelist_plex}.bak
		sleep 1s
	fi
	
	# check for existance of deb_multi source list
	if [[ -f ${sourcelist_deb_multi} ]]; then
		# backup sources list file
		echo -e "\n==> Backing up ${sourcelist_deb_multi} to ${sourcelist_deb_multi}.bak"
		sudo mv ${sourcelist_deb_multi} ${sourcelist_deb_multi}.bak
		sleep 1s
	fi

	###############################
	# add GPG keys
	###############################
	
	echo -e "\n==> Adding GPG key(s)"
	sleep 1s
	
	# Key Desc: Debian Multimedia
	# Key ID: 65558117
	# Full Key ID: 5C808C2B65558117
	gpg_key_check=$(gpg --list-keys 65558117)
	
	if [[ "$gpg_key_check" != "" ]]; then
		echo -e "\nDebian Multimedia Key [OK]\n"
		sleep 1s
	else
		echo -e "\nDebian Multimedia Key [FAIL]. Adding now...\n"
		"$scriptdir/extra/gpg_import.sh" 5C808C2B65558117
	fi
	
	###############################
	# update and pre-reqs
	###############################
	
	echo -e "==> Installing prerequisite software\n"
	sleep 1s
	
	# Plex
	sudo curl http://shell.ninthgate.se/packages/shell-ninthgate-se-keyring.key | sudo apt-key add -
	sudo apt-get update
	
	# deb-multimedia-keyring
	sudo apt-get install deb-multimedia-keyring -y

	###############################	
	# Add prefs
	###############################
	
	echo -e "\n==> Adding /etc/apt configurations"
	sleep 1s
	
	# Create and add required text to preferences file
	# Verified policy with apt-cache policy
	# sudo temp file list, then move because of perms
	
	cat <<-EOF > ${prefer_plex_tmp}
	Package: *
	Pin: origin ""
	Pin-Priority:110
	
	Package: *
	Pin: release n=wheezy
	Pin-Priority:110
	EOF

	cat <<-EOF > ${prefer_deb_multi_tmp}
	Package: *
	Pin: origin ""
	Pin-Priority:110
	
	Package: *
	Pin: release l=Unofficial Multimedia Packages
	Pin-Priority:110
	EOF
	
	# move tmp lists in 2 easy actions
	sudo mv ${prefer_plex_tmp} ${prefer_plex}
	sudo mv ${prefer_deb_multi_tmp} ${prefer_deb_multi}
	
	###############################	
	# Add sources
	###############################
	
	# Deb multimedia
	# add to tmp file, then move
	
	cat <<-EOF > ${sourcelist_plex_tmp}
	# Plex team repo
	deb http://shell.ninthgate.se/packages/debian wheezy main
	EOF

	cat <<-EOF > ${sourcelist_deb_multi_tmp}
	# Deb multimedia repo
	deb http://www.deb-multimedia.org wheezy main non-free
	EOF

	# move lists
	sudo mv -v ${sourcelist_plex_tmp} ${sourcelist_plex}
	sudo mv -v ${sourcelist_deb_multi_tmp} ${sourcelist_deb_multi}

	###############################	
	# update system and sources
	###############################

	sudo apt-key update
	sudo apt-get update

	###############################	
	# resolve outstanding deps
	###############################
	
	echo -e "\n==> Resolving missing Debian packages"
	sleep 1s
	
	wget -P /tmp "http://www.libregeek.org/SteamOS-Extra/Plex/ttf-ubuntu-font-family_0.80-0ubuntu6_all.deb"
	cd /tmp
	sudo gdebi ttf-ubuntu-font-family*.deb
	
	###############################
	# cleanup
	###############################
	
	echo -e "\n==> Cleanup"
	sleep 1s
	rm -rf /tmp/ttf-ubuntu-font-family_0.80-0ubuntu6_all.deb
	
	###############################
	# Install actions
	###############################

	echo -e "\n==> Installing Plex Home Theater"
	sleep 1s
	# install Plex Home Theater
	sudo apt-get -t wheezy install plexhometheater -y
	
	# cleanup any old packages
	sudo apt-get autoremove
  
}

ep_install_kodi()
{
	# Source: http://forum.kodi.tv/showthread.php?tid=197422
  
	echo -e "\n==> Installing Kodi from automated script..."
	sleep 2s
	
	###############################
	# Set vars
	###############################
	pkg_type=""
	
	###############################
	# sources
	###############################
	
	echo -e "\n==> Configuring sources"
	sleep 1s
	
	# vars
	reponame_kodi="kodi"
	
	sourcelist_kodi_tmp="${reponame_kodi}.list"
	sourcelist_kodi="/etc/apt/sources.list.d/${reponame_kodi}.list"
	
	prefer_kodi_tmp="${reponame_kodi}"
	prefer_kodi="/etc/apt/preferences.d/${reponame_kodi}"
	
	# Check for existance of /etc/apt/preferences.d/{reponame_kodi} file
	if [[ -f ${reponame_kodi} ]]; then
		# backup preferences file
		echo -e "\n==> Backing up ${reponame_kodi} to ${reponame_kodi}.bak"
		sudo mv ${reponame_kodi} ${reponame_kodi}.bak
		sleep 1s
	fi
	
	# check for existance of plex source list
	if [[ -f ${sourcelist_kodi} ]]; then
		# backup sources list file
		echo -e "\n==> Backing up ${sourcelist_kodi} to ${sourcelist_kodi}.bak"
		sudo mv ${sourcelist_kodi} ${sourcelist_kodi}.bak
		sleep 1s
	fi

	###############################
	# add GPG keys
	###############################
	
	# may not be needed
	
	###############################
	# update and pre-reqs
	###############################
	
	# add gpg key
	wget -O - http://mirrors.xbmc.org/apt/steamos/steam@xbmc.org.gpg.key | sudo apt-key add -
	
	###############################	
	# Add prefs
	###############################
	
	echo -e "\n==> Adding /etc/apt configurations\n"
	sleep 1s
	
	# Create and add required text to preferences file
	# Verified policy with apt-cache policy
	# write to tmp, then move
	
	cat <<-EOF > ${prefer_kodi_tmp}
	Package: *
	Pin: origin mirrors.xbmc.org
	Pin-Priority: 500
	 
	Package: libtag1c2a libtag1-vanilla
	Pin: origin mirrors.xbmc.org
	Pin-Priority: 901
	EOF
	
	# move pref file
	sudo mv ${prefer_kodi_tmp} ${prefer_kodi}
	
	###############################	
	# Add sources
	###############################
	
	# Kodi source cfg
	# write to tmp, move after
	
	cat <<-EOF > ${sourcelist_kodi_tmp}
	# Kodi team repo
	deb http://mirrors.xbmc.org/apt/steamos alchemist main
	EOF
	
	# move source list
	sudo mv ${sourcelist_kodi_tmp} ${sourcelist_kodi}

	###############################	
	# update source lists
	###############################
	
	sudo apt-get update

	###############################	
	# resolve outstanding deps
	###############################
	
	# n/a for now
	
	###############################
	# cleanup
	###############################
	
	# n/a for now
	
	###############################
	# Install actions
	###############################

	echo -e "\n==> Installing Kodi"
	sleep 1s

	# install Kodi
 	sudo apt-get install kodi
	
	# cleanup any old packages
	sudo apt-get autoremove
  
}

ep_install_chrome()
{
	# See: https://github.com/ValveSoftware/SteamOS/wiki/Installing-Google-Chrome-for-Netflix

	echo -e "\n==> Installing Chrome from automated script..."
	sleep 2s
	
	###############################	
	# set vars
	###############################

	pkg_type=""
	install_dir="$HOME/Downloads/Chrome"
	
	# create and enter build dir
	if [[ -d "$install_dir" ]]; then
		echo -e "\n==INFO==\nChrome DIR found\n"
	else
		echo -e "\n==INFO==\nChrome DIR not found, creating...\n"
		sleep 1s
		mkdir -p "$install_dir"
	fi
	
	cd "$install_dir"
	
	###############################
	# Plugins such as gnash?
	###############################
	
	# TODO
	
	###############################
	# update and pre-reqs
	###############################
	
	# install pre-reqs using the main desktop-software script
	# REMOVED per Valve wiki (none to specify).
	
	#######################
	# libappindiactor
	#######################
	
	# libappindicator1 required but not needed explictly
	# This really only allows applications to export a menu into the panel
	# Based on KSNI it also works in KDE and will fallback to generic Systray 
	# support if none of those are available. 
	
	# set vars
	pkg_type="deb"
	PKG="libappindicator1"
	PKG_FILENAME="libappindicator1_12.10.1_SteamOS_amd64.deb"
	BASE_URL="http://www.libregeek.org/SteamOS-Extra/browsers"
	BIN_LOC=""
	
	# set multiflag
	multi="n"
	
	# test if user requests it
	if [[ "$options" == "test" ]]; then
		# go to test function
		ep_test_deb
		exit
	fi
	
	echo -e "\n==> Installing libappindicator\n"
	sleep 2s
	
	# Prereq for libappindicator1 
	sudo apt-get install libglib2.0-0
	
	# proceed to pkg eval for libappindicator1
	ep_install_eval_pkg

	# libglib2.0.0 is only ver. 2.33, when libappindicator is asking for >=2.37.3
	# Need to find / compile 2.37 from somewhere. Maybe grab the jessie source and try (risky).
	# For now, attempt will be made at altering depends ver just down to our level
	
	###############################	
	# install google-chrome-stable
	###############################
	
	# download
	wget -O google-chrome-stable_current_amd64.deb \
	"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
	
	# install
	sudo dpkg -i google-chrome-stable_current_amd64.deb
	rm -rf *.deb

	# back out of installdir
	if [[ -d "$scriptdir" ]]; then
		cd "$scriptdir"
	else
		# attempt to use default DIR
		cd "/home/desktop/SteamOS-Tools/"
	fi

	###############################	
	# Post conf for Netflix
	###############################

	# TODO
	
	###############################	
	# Cleanup
	###############################

}

ep_install_gdrive()
{

	echo -e "\n==> Installing Gdrive from automated script..."
	sleep 2s

	echo ""
	#####################################################
	# Gdrive (cli) 
	#####################################################
	# Name: Gdrive
	# Desc: command line tool for google drive.
	# Source: https://github.com/prasmussen/gdrive

	# set vars
	pkg_type="deb"
	PKG=gdrive
	PKG_FILENAME="TODO"
	BASE_URL="http://www.libregeek.org/SteamOS-Extra"
	BIN_LOC="/usr/bin/gdrive"
	
	# set multiflag
	multi="n"
	
	# test if user requests it
	if [[ "$options" == "test" ]]; then
		# go to test function
		ep_test_deb
		exit
	fi
	
	# ep_install_eval_pkg
	ep_install_eval_binary
}

ep_install_netflix()
{

	echo -e "\n==> Installing Netflix from automated script..."
	sleep 2s

	#######################################
	# EXPERIMENTAL !!!! DOES NOT WORK!
	#######################################

	echo ""
	#####################################################
	# PKG NAME
	#####################################################
	# Name: netflix-desktop
	# Warning: libwayland-client0 ignored when building netflix-compholio!
	# Source build maybe possible: https://launchpad.net/~gnome3-team/+archive/ubuntu/gnome3-staging
	# Backup plan: compile pipelight, add as post-install configuration to firefox funct. above.
	
	# set vars
	pkg_type="deb"
	PKG="netflix-desktop"
	PKG_FILENAME="/tmp/netflix-pkg-tmp.txt"
	BASE_URL="http://www.libregeek.org/SteamOS-Extra/multimedia/netflix-desktop/"
	BIN_LOC=""
	software_list="/tmp/netflix-pkg-tmp.txt"
	
	# set multiflag
	multi="y"
	
	# test if user requests it based on type, dash test
	if [[ "$options" == "test" ]]; then
		# go to test function
		ep_test_deb
		exit
	fi
	
	# set order in which packages must be installed (must be done in order!)
	# Several sub-packages of netflix desktop must be installed properly beforehand.


	cat <<-EOF > "/tmp/netflix-pkg-tmp.txt"
	## wine-staging-i386_1.7.42_SteamOS_amd64.deb  ## NEEDS BUILT FROM PPA
	wine-staging_1.7.42_SteamOS_amd64.deb
	## wine-compholio-pkg
	## ttf-mscorefonts-pkg
	## python-pyattr-pkg
	wine-browser-installer_0.8.9-1_SteamOS_all.deb
	wine-silverlight5.1-installer_0.8.9-1_SteamOS_all.deb
	netflix-desktop_0.8.9-1_SteamOS_all.deb
	EOF
	
	# clean/remove existing packages so that the install does not fail
	echo "\n==INFO==\nPurging previously installed packages for a clean install...\n" 
	
	for x in `cat $software_list`; do
		sudo dpkg --purge $x
	done
	
	# set multiflag so multiple debs are processed
	multi="y"
	
	# proceed to pkg eval
	ep_install_eval_pkg
	
	# remove temp pkg list
	rm -f /tmp/netflix-pkg-tmp

}

ep_install_pipelight()
{

	echo -e "\n==> Installing Pipelight from automated script..."
	sleep 2s

	# See: http://pipelight.net/cms/install/installation-steamos.html

	#######################################
	# Vars
	#######################################
	
	# source lists
	reponame_pipelight="pipelight"
	sourcelist_pipelight_tmp="${reponame_pipelight}.list"
	sourcelist_pipelight="/etc/apt/sources.list.d/${reponame_pipelight}.list"
	
	prefer_pipelight_tmp="${reponame_pipelight}"
	prefer_pipelight="/etc/apt/preferences.d/${reponame_pipelight}"
	
	#######################################
	# file/dir checks, backups
	#######################################
	
	# check for existance of pipelight source list
	if [[ -f ${sourcelist_pipelight} ]]; then
		# backup sources list file
		echo -e "\n==> Backing up ${sourcelist_pipelight} to ${sourcelist_pipelight}.bak"
		sudo mv ${sourcelist_pipelight} ${sourcelist_pipelight}.bak
		sleep 1s
	fi
	
	# Check for existance of /etc/apt/preferences.d/{prefer_pipelight} file
	if [[ -f ${prefer_pipelight} ]]; then
		# backup preferences file
		echo -e "\n==> Backing up ${prefer_pipelight} to ${prefer_pipelight}.bak"
		sudo mv ${prefer_pipelight} ${prefer_pipelight}.bak
		sleep 1s
	fi

	
	#######################################
	# add GPG keys
	#######################################

	echo -e "\n==> Adding GPG key(s)"
	sleep 1s
	
	# GPG Key
	wget http://download.opensuse.org/repositories/home:/DarkPlayer:/Pipelight/SteamOS/Release.key
	sudo apt-key add Release.key

	###############################	
	# Add prefs
	###############################
	
	echo -e "\n==> Adding /etc/apt configurations\n"
	sleep 1s
	
	# disable prefs for now....
	
	# Create and add required text to preferences file
	# Verified policy with apt-cache policy
	# sudo temp file list, then move because of perms
	
	#cat <<-EOF > ${prefer_pipelight_tmp}
	#Package: *
	#Pin: origin ""
	#Pin-Priority:110
	#EOF
	
	# move tmp list
	#sudo mv ${prefer_pipelight_tmp} ${prefer_pipelight}

	#######################################
	# Add source
	#######################################

	cat <<-EOF > ${sourcelist_pipelight_tmp}
	# Pipelight repo
	deb http://download.opensuse.org/repositories/home:/DarkPlayer:/Pipelight/SteamOS/ ./
	EOF
	
	# May use single line echo here. Likely this source addition has errors
	# with using an EOF list with the trailing "./"
	
	#echo "deb http://download.opensuse.org/repositories/home:/DarkPlayer:/Pipelight/SteamOS/ ./" \
	#${sourcelist_pipelight_tmp}
	
	# move source list
	sudo mv ${sourcelist_pipelight_tmp} ${sourcelist_pipelight}

	#######################################
	# Pre-reqs
	#######################################
	
	# 32 bit arch (if not already added)
	sudo dpkg --add-architecture i386
	
	#######################################
	# Install
	#######################################

	echo -e "\n==> Updating pacakge lists\n"
	sleep 2s
	
	sudo apt-get update
	
	echo -e "\n==> Installing pipelight\n"
	sleep 2s
	
	#######################################
	################ ERRORS ###############
	#######################################
	
	# This method still seems to require wine-staging. 
	# Need to discuss yet on IRC with the pipelight team.
	# Wine staging deb does not seem to exist in the repo below
	# It also still appears as a depedency in the 'Packages' list
	# http://download.opensuse.org/repositories/home:/DarkPlayer:/Pipelight/Debian_7.0/
	
	sudo apt-get -o Dpkg::Options::="--force-overwrite" install pipelight-multi
	sudo pipelight-plugin --update

	# Info
	# The Dpkg::Options::="--force-overwrite" option is required since the libssl 
	# package inside the SteamOS repository is not completely Multiarch ready and 
	# the 32 bit version tries to overwrite the changelog of the 64 bit version. 
	# Since both versions of the changelog contain the same content and are only 
	# provided for informational purposes, they can be safely overwritten.
	
	
	#######################################
	# Post-Install configs
	#######################################
	
	# The Steam internal browser only supports a subset of the NPAPI and Pipelight 
	# is not yet compatible with this. You can therefore only use Pipelight with 
	# normal desktop browsers like the preinstalled Iceweasel browser.
	
	sudo pipelight-plugin --enable silverlight

	#######################################
	# clean release keys
	#######################################

	rm -f *.Release.key*

}

ep_install_eval_pkg()
{

	echo -e "\n==> Installing $PKG Debian via external script\n"

	#####################################################
	# Binary package eval routine using dpkg or gdebi
	#####################################################
	
	PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $PKG | grep "install ok installed" 2> /dev/null)
	if [ "" == "$PKG_OK" ]; then
		echo -e "\n==INFO==\n\n$PKG not found. Installing now...\n"
		sleep 2s
		
		# check for multiple debs for install
		if [[ "$multi" == "y" ]]; then
		
			cd /tmp
			# Download files recursively form base URL folder, skip index.html
			# See: http://stackoverflow.com/a/5335576
			wget -r -nH --cut-dirs=3 --no-parent --reject="index.html" "$BASE_URL"
			
			# process install in loop for each package in our software list
			for x in `cat $software_list`; do
				sudo dpkg -i $x
			done
			
		elif [[ "$multi" == "n" ]]; then
		
			# download target singluar deb
			wget -P /tmp "$BASE_URL/$PKG_FILENAME"
			# process install
			sudo gdebi "/tmp/$PKG_FILENAME"
		fi

		# cleanup
		rm -f "/tmp/$PKG_FILENAME"
		
		# cleanup leftover debs
		rm -f /tmp/*.deb
		
		if [ $? == '0' ]; then
			echo -e "\n==INFO==\nSuccessfully installed $PKG"
			sleep 2s
		else
			echo -e "\n==INFO==\nCould not install $PKG. Exiting..."
			sleep 3s
			exit 1
		fi
	else
		echo "Checking for $PKG [OK]"
		sleep 0.5s
	fi

	# back out of any temp dir to script dir
	if [[ "$scriptdir" != "" ]]; then
		cd "$scriptdir"
	else
		cd "$HOME"
	fi

}

ep_install_eval_binary()
{

	echo -e "\n==> Installing $PKG binary via external script"

	echo ""
	#####################################################
	# Binary package eval routine
	#####################################################
	# This is mainly for binary file dumps only.
	# For example, gdrive has binaries that require no depdencies.
	# This is subject to change in the future.
	
	if [[ ! -f "$BIN_LOC" || -d "$PKG_DIR" ]]; then
		echo -e "\n==INFO==\n$PKG not found. Installing now...\n"
		sleep 2s
		wget -P /tmp "$BASE_URL/$PKG_FILENAME"
		sudo gdebi "/tmp/$PKG_FILENAME"
		# cleanup
		rm -f "/tmp/$PKG_FILENAME"
		
		if [ $? == '0' ]; then
			echo -e "\n==INFO==\nSuccessfully installed $PKG"
			sleep 2s
		else
			echo -e "\n==INFO==\nCould not install $PKG. Exiting..."
			sleep 3s
			exit 1
		fi
	else
		echo "Checking for $PKG [OK]"
		sleep 0.5s
	fi

}
ep_test_deb()
{
	clear
	echo -e "==> User requested testing of package routine!"
	sleep 1s
	
	###############################	
	# set vars
	###############################
	
	test_loc="/tmp/pkg-test"
	log="log.txt"
	
	###############################	
	# Pre-checks
	###############################
	
	# check that the tmpfs (/tmp) filesystem is not full.
	# if it is, instruct user they need to reboot
	
	df_chk=$(df -h /tmp | grep "[0-9]%" | cut -c 34-37)
	
	if [[ "$df_chk" == "100%" ]]; then
		echo -e "\n==WARNING!==\nThe tempfs temp file system in /tmp is full!"
		echo -e "Please issue 'sudo reboot' to clear this when possible! Exiting in..."
		echo -e "\n5" && sleep 1s
		echo "4" && sleep 1s
		echo "3" && sleep 1s
		echo "2" && sleep 1s
		echo -e "1\n" && sleep 1s
		exit
	else
		# output small reminder
		echo -e "\n==INFO==\nNotice: tmpfs (/tmp) usage is at: $df_chk\n"
		sleep 3s
	fi
	
	###############################	
	# Commence test
	###############################

	# start testing if eval
	if [[ "$pkg_type" == "deb" ]]; then
		
		# TESTING ONLY - download all netflix-dekstop files from libregeek
		# After download, install $pkg, and remove it.
		
		# test for dir and create/remove
		if [[ -d "$test_loc" ]]; then
			# remove
			rm -rf "$test_loc"
			# recreate
			mkdir -p "$test_loc"
		else
			# create
			mkdir -p "$test_loc"
		fi
		
		cd "$test_loc"
		# check for multiple debs for install
		if [[ "$multi" == "y" ]]; then
		
			# Download files recursively form base URL folder, skip index.html
			# See: http://stackoverflow.com/a/5335576
			wget -r -nH --cut-dirs=3 --no-parent --reject="index.html" "$BASE_URL"
			
		elif [[ "$multi" == "n" ]]; then
		
			# download target singluar deb
			wget "$BASE_URL/$PKG_FILENAME"

		fi
		
		echo -e "\n==> Listing downloaded pkgs in $test_loc\n"
		sleep 2s
		ls "$test_loc" | less
		
		# set pkg
		sleep 0.5s
		echo ""
		read -ep "Enter Pkg to test >> " PKG
		
		# isntall 
		echo -e "\n==> Attempting install of deb pkg $PKG\n"
		sleep 2s
		sudo dpkg -i "$PKG" | tee pkg_test_results.txt
		
		echo -e "\n==> Continuing to removal...\n" 
		sleep 1s
	
		# remove pkg and pkg_test_results.txt log
		# This var is based on the last cached pkg installed
		
		dpkg_remove_tmp=$(ls -tl "/var/lib/dpkg/info" | head -2 | awk '{print $9}' | grep .list)
		echo "$dpkg_remove_tmp" > temp.txt
		
		#remove .list suffix 
		sed -i "s|.list||g" temp.txt
		dpkg_remove_tmp=$(cat temp.txt)

		echo -e "\n==> Purging test package $PKG\n"
		sleep 2s
		sudo dpkg --purge "$dpkg_remove_tmp"

		# review
		echo -e "\n==> End of test cycle. Exiting. Please review $log\n"
		sleep 2s
		
	else
		# Not yet implemented
		echo -e "\nTesting function for this package not yet implemented\n"
		sleep 2s
		exit
		
	# end testing if eval
	fi
}

ep_test_opts()
{
	# simple echo of passed opts for testing only
	echo "opts received: "
	echo -e "options : $options"
	echo "Software type : $type"
	echo "Extra opts : $extra_opts"
	echo -e "Availble custom pkg list 2: \n"
	cat custom-pkg.txt
	sleep 50s
	exit
}


