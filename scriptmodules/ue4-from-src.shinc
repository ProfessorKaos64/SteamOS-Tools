#!/bin/bash

# -------------------------------------------------------------------------------
# Author:     		Michael DeGuzis
# Git:			https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:		ue4-from-source.sh
# Script Ver:	  	0.1.1
# Description:		script to install ue4 from source.
#
# See:            	https://wiki.unrealengine.com/Building_On_Linux
#			https://github.com/EpicGames/UnrealEngine#linux
#
# Usage:	      	N/A, called from another script
#
#Last tested:		Please see SteamOS-Tools/docs/desktop-software-readme.md 
# -------------------------------------------------------------------------------

time_start=$(date +%s)
time_stamp_start=(`date +"%T"`)

m_install_ue4_src()
{
	
	# start apt mode if check
	if [[ "$apt_mode" == "install" ]]; then
	
		#################################################
		# Prerequisites
		#################################################
		
		# Handled by desktop-software.sh
		# Software list: cfgs/software-lists/ue4.txt
		
		#####################################################
		# Clang notice:
		#####################################################
		
		# Old version is only available
		# From UE4 Team: Note: as of 4.7, we want to install those packages in 
		# semi-automatic way (from Setup.sh). While you can certainly use the 
		# manual way, it is preferred to use - and test - provided "out of the box" experience.
		# 1:3.0-6.2 Debian:7.8/oldstable 
		
		# However clang 3.5 is not available in the debian repos, we must add the source
		
	#####################################################
	# Package eval routine
	#####################################################
	
	# assess via dpkg OR traditional 'which'
	PKG="clang-3.5"
	PKG_OK_DPKG=$(dpkg-query -W --showformat='${Status}\n' $PKG | grep "install ok installed")
	PKG_OK_WHICH=$(which $PKG)
	
	if [[ "$PKG_OK_DPKG" == "" && "$PKG_OK_WHICH" == "" ]]; then
		
		# Set default user options
		
		# tmp vars
		reponame="clang-3.5"
		sourcelist_tmp="${reponame}.list"
		prefer_tmp="${reponame}"
		
		# target vars
		sourcelist="/etc/apt/sources.list.d/${reponame}.list"
		prefer="/etc/apt/preferences.d/${reponame}"
		
		# Check for existance of /etc/apt/preferences.d/{prefer} file
		if [[ -f ${prefer} ]]; then
			# backup preferences file
			echo -e "==> Backing up ${prefer} to ${prefer}.bak\n"
			sudo mv ${prefer} ${prefer}.bak
			sleep 1s
		fi
		
		# Create and add required text to preferences file
		# Verified policy with apt-cache policy
		cat <<-EOF > ${prefer_tmp}
		Package: *
		Pin: origin ""
		Pin-Priority:110
		EOF
		
		# move tmp var files into target locations
		sudo mv  ${prefer_tmp}  ${prefer}
		
		##############################################
		# Check for lists in repos.d
		##############################################
		
		if [[ -f ${sourcelist} ]]; then
	        	# backup sources list file
	        	echo -e "==> Backing up ${sourcelist} to ${sourcelist}.bak\n"
	        	sudo mv ${sourcelist} ${sourcelist}.bak
	        	sleep 1s
		fi
		
		##############################################
		# Create and add required text to clang list
		##############################################

		# Debian wheezy
		cat <<-EOF > ${sourcelist_tmp}
		# Clang 3.5
		# See: http://sylvestre.ledru.info/blog/2014/08/11/clang-3-4-3-5
		deb http://llvm.org/apt/unstable/ llvm-toolchain-3.5 main
		EOF
		
		# Update system
		echo -e "\n==> Updating index of packages...\n"
		sleep 2s
		sudo apt-get update
		
		# install clang 3.5
		sudo apt-get install clang-3.5
		
	else
		echo "Checking for $PKG [OK]"
		sleep 0.5s
	
	# end clang check
	fi
		
		#################################################
		# Initial setup
		#################################################
		
		
		# notify user they MUST have a UE4 account to build
		clear
		cat <<-EOF
		#####################################################
		Warning: Please read the below carefully!
		#####################################################
		Make sure you linked your GitHub account to your profile on
		https://unrealengine.com, as all Epic repositories are private. The script
		may ask you to install additional packages (on certain distributions), then
		it will download the archives with binary dependencies (by default, to
		~/Downloads), which are pretty large (3GB in total) - they won't be re-downloaded
		unless they are updated for the particular release tag. If any new archives have
		been downloaded (which is the case the first time you do this), the script will
		unpack them over your repository (it will ask you to confirm that action as it
		is potentially destructive). You can force this by supplying -updatedeps flag
		if for some reason you want to unpack them again.
		
		Press [ENTER] to continue or "exit" to abort.
		
		See: https://github.com/EpicGames/UnrealEngine#linux
		EOF
		
		read -ep "Choice: " user_choice
		
		if [[ "$user_choice" == "exit" ]]; then
			# exit script
			exit 1
		else
			# continue normally
			printf "\nContinuing...\n" 
			sleep 1s
			clear
		fi  
		
		# set vars
		export install_dir="/home/desktop/ue4-src"
		export git_dir="/home/desktop/ue4-src/UnrealEngine"
		export git_url="https://github.com/3dluvr/UnrealEngine.git"
		#export symlink_target="/usr/bin/ue4"
		#export binary_loc="$git_dir/ue4"
		
		# If git folder UnrealEngine exists, evaluate it
		# Avoiding a large download again is much desired.
		# If the DIR is already there, the fetch info should be intact
		
		# start git check if
		if [[ -d "$git_dir" ]]; then
		
			echo -e "\n==Info==\nGit folder already exists! Attempting git pull...\n"
			sleep 1s
			# attempt to pull the latest source first
			cd $git_dir
			# eval git status
			output=$(git pull $git_url)
		
			# evaluate git pull. Remove, create, and clone if it fails
			# start git pull check
			if [[ "$output" != "Already up-to-date." ]]; then
				echo -e "\n==Info==\nGit directory pull failed. Removing and cloning...\n"
				sleep 2s
				cd
				rm -rf "$git_dir"
				mkdir -p "$install_dir"
				cd "$install_dir"
				# clone and fetch super build (evaluating currently)
				git clone "$git_url"
			else
				# already up to date
				echo -e "\n==Info==\nGit directory already up to date!"
			
			# end  git pull check
			fi
		
		else
			# build DIRs do not exist
			echo -e "\n==Info==\nGit directory does not exist. cloning now...\n"
			sleep 2s
			# create and clone
			mkdir -p "$install_dir"
			cd "$install_dir"
			# clone and fetch super build (evaluating currently)
			git clone "$git_url"
			# Enter build dir
			cd "$git_dir"
		
		# end git check if
		fi
		
		#################################################
		# Build UE4
		#################################################
		
		echo -e "\n==> Building sources...please wait"
		sleep 2s

		############################
		# proceed to global build:
		############################
		
		# perform directory check for *.so (libretro cores) in
		# /usr/bin/libretro. These will be present if this module was
		# already ran before
		
		ue4_check=$(ls "$git_dir")
		
		############################
		# Begin UE4 build eval
		############################
		
		# start UE4 build eval
		if [[ "$ue4_check" != "" ]]; then
		
			# Note here: the ue4 check should be the pointed towards a binary or something first.
			# the directory check will always be full from the clone
			echo -e "\n==INFO==\n"
			echo -e "It seems UE4 is already built in $git_dir"
			echo -e "Would you like to rebuild [y], or [n]?\n"
			
			# the prompt sometimes likes to jump above sleep
			sleep 0.5s
			
			# gather user input
			read -ep "Choice: " user_input_ue4
		  
				if [[ "$user_input_ue4" == "n" ]]; then
					echo -e "\n==> Skipping UE4 build...\n"
					sleep 2s
				elif [[ "$user_input_ue4" == "y" ]]; then
					echo -e "\n==> Rebuilding UE4...\n"
					sleep 2s
					# build UE4
					./Setup.sh
					./GenerateProjectFiles.sh
				else
					echo -e "\n==ERROR=="
					echo -e "Invalid input, exiting...\n"
					sleep 2s
					exit
				fi
		
		else	
			echo -e "\nUE4 does not appear to be built."
			echo -e "Building now...\n"
			sleep 2s
		  
			# build UE4
			./Setup.sh
			./GenerateProjectFiles.sh
			    
			# Rebuild SDL2
			# echo -e "Rebuilding SDL support\n"
			# cd Engine/Source/ThirdParty/SDL2 && ./build.sh
			
			# end UE4 build eval
		fi
		
		#################################################
		# Post install configuration
		#################################################
		
		# TODO
		
		#################################################
		# Cleanup
		#################################################
		
		# clean up dirs
		
		# note time ended
		time_end=$(date +%s)
		time_stamp_end=(`date +"%T"`)
		runtime=$(echo "scale=2; ($time_end-$time_start) / 60 " | bc)
		
		# output finish
		echo -e "\nTime started: ${time_stamp_start}"
		echo -e "Time started: ${time_stamp_end}"
		echo -e "Total Runtime (minutes): $runtime\n"
	
	
	elif [[ "$apt_mode" == "remove" ]]; then
	
		# Add dekstop launcher file here
		# Transfer to /usr/share/applications
		# TODO !!!
		
		#Remove directories, build files, etc if uninstall is specified by user
		echo -e "\n==> Removing related files for UE4-src routine"
		sleep 2s
		
		# remove directories
		sudo rm -rf "$install_dir" "$git_dir" "$symlink_target"
		
		# end apt mode if check  
	fi

}
