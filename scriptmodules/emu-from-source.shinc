#!/bin/bash

# -------------------------------------------------------------------------------
# Author:     		Michael DeGuzis
# Git:		  	https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:		emu-from-source.sh
# Script Ver:	  	0.4.3
# Description:		script to install emulation softare as a 
#                 	part of install-debian-software.sh
#
#			See: https://wiki.debian.org/CreatePackageFromPPA
# Usage:	  	N/A, called from another script
#
# Last tested:		20150423, runtime: 27.1 minutes, Pass: 53, Fail: 1
#			Intel Core i5 4570k / 16 GB RAM / 15 Mb/s LAN
#			Cores failed: testgl, test
#			Already fetched: [Yes]
# -------------------------------------------------------------------------------

time_start=$(date +%s)
time_stamp_start=(`date +"%T"`)

efs_main()
{
	
	#################################################
	# Initial setup
	#################################################
	
	# Warn user this will take some time
	echo -e "\nBuilding Retroarch and its associated cores will take some time. Please wait or \
press CTRL+C now."
	echo -e "\nPress Enter to continue\n"
	
	read -n 1 
	printf "\nContinuing...\n" 
	clear 

	# set vars
	install_dir="/home/desktop/retroarch-src"
	git_dir="/home/desktop/retroarch-src/libretro-super"
	git_url="https://github.com/libretro/libretro-super"
	symlink_target="/usr/bin/retroarch"
	binary_loc="$git_dir/retroarch/retroarch"
	
	# remove old symlink if it exists
	if [[ -f "$symlink_target" ]]; then
		sudo rm -f "$symlink_target"
	fi
	
	# If git folder libretro-super exists, evaluate it
	# Avoiding a large download again is much desired.
	# If the DIR is already there, the fetch info should be intact
	if [[ -d "$git_dir" ]]; then
		
		echo -e "\nGit folder already exists! Attempting git pull...\n"
		sleep 1s
		# attempt to pull the latest source first
		cd $git_dir
		# eval git status
		output=$(git pull $git_url)

		# evaluate git pull. Remove, create, and clone if it fails
		if [[ "$output" != "Already up-to-date." ]]; then
			echo -e "\nGit directory pull failed. Removing and cloning...\n"
			sleep 1s
			cd
			rm -rf "$git_dir"
			mkdir -p "$install_dir"
			cd "$install_dir"
			# clone and fetch super build (evaluating currently)
			git clone "$git_url"
		fi
	else
		echo -e "\nGit directory does not exist. cloning now...\n"
		sleep 1s
		# create and clone
		mkdir -p "$install_dir"
		cd "$install_dir"
		# clone and fetch super build (evaluating currently)
		git clone "$git_url"
	fi
	
	# enter git dir if we are not already
	cd $git_dir
	
	#################################################
	# fetch information
	#################################################
	# See: https://github.com/libretro/libretro-super/blob/master/libretro-build.sh#L91
	
	echo -e "\n==> Fetching sources...please wait\n"
	sleep 2s
	
	############################
	# disabled fetches (games):
	############################
	
	sed -i -e 's|register_core "bsnes"|#register_core "bsnes"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "ffmpeg"|#register_core "ffmpeg"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "tyrquake"|#register_core "tyrquake"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "prboom"|#register_core "prboom"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "dinothawr"|#register_core "dinothawr"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "nxengine"|#register_core "nxengine"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "2048"|#register_core "2048"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "stonesoup"|#register_core "stonesoup"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "emux"|#register_core "emux"|g' "$git_dir/rules.d/core-rules.sh"
	
	############################
	# disabled fetches (extra):
	############################
	# These mostly include cores that fail to build later on
	
	sed -i -e 's|register_core "ffmpeg"|#register_core "ffmpeg"|g' "$git_dir/rules.d/core-rules.sh"
	
	############################
	# proceed to global fetch:
	############################
	
	# fetch cores
	./libretro-fetch.sh 
	
	#################################################
	# Build player and cores
	#################################################
	
	echo -e "\n==> Building sources...please wait"
	sleep 2s
	
	# build Retroarch
	./retroarch-build.sh 
	
	# Remove untested, broken, standalone games, or extra cores
	# Uncomment the below sed lines to build ALL cores
	
	############################
	# disabled cores:
	############################
	# These mostly include cores that fail to build
	
	sed -i -e '/libretro_build_core bsnes/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core bsnes_cplusplus98/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core bsnes_mercury/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core bnes/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core mame078/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core emux/d' "$git_dir/libretro-build.sh"
	sed -i -e '/build_libretro_test/d' "$git_dir/libretro-build.sh"

	############################
	# disabled extra:
	############################

	sed -i -e '/libretro_build_core ffmpeg/d' "$git_dir/libretro-build.sh"
	
	############################
	# disabled games:
	############################

	sed -i -e '/libretro_build_core tyrquake/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core prboom/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core dinothawr/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core nxengine/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core 2048/d' "$git_dir/libretro-build.sh"
	
	############################
	# proceed to global build:
	############################
	
	./libretro-build.sh 
	
	#################################################
	# Post install configuration
	#################################################
	# Any configurations for Retroarch or libretro will go here
	
	echo -e "\n==> Running post-build instructions...please wait\n"
	sleep 2s
	
	# symlink 'retrarch' for now until build flags are implemented
	sudo ln -s "$binary_loc" "$symlink_target"
	
	#################################################
	# Cleanup
	#################################################
	
	# clean up dirs
	
	# note time ended
	time_end=$(date +%s)
	time_stamp_end=(`date +"%T"`)
    	runtime=$(echo "scale=2; ($time_end-$time_start) / 60 " | bc)
	
	# output finish
	echo -e "\nTime started: ${time_stamp_start}"
	echo -e "Time started: ${time_stamp_end}"
	echo -e "Total Runtime (minutes): $runtime\n"

}
