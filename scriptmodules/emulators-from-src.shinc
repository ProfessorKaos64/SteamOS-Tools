#!/bin/bash

# -------------------------------------------------------------------------------
# Author:     		Michael DeGuzis
# Git:		  	    https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:		  emulators-from-src.shinc
# Script Ver:	  	0.1.1
# Description:		script to build emulators from source
#
# Usage:	      	N/A, called from another script
#
# -------------------------------------------------------------------------------

time_start=$(date +%s)
time_stamp_start=(`date +"%T"`)

show_warning()
{
  	clear 
  	# Warn user this will take some time
	echo -e "\nBuilding emulators from source will take some time."
	echo -e "Please wait or press CTRL+C now. This is largely dependant on your"
	echo -e "CPU, HDD Speed, and RAM configuration."
	echo -e "\nPress Enter to continue"
	
  read -n 1 
  printf "Continuing...\n" 
  
}

source_compiler_flags()
{
	
if [[ $ARCH == i686 ]]; then
    cmake .. \
      -DCMAKE_BUILD_TYPE='Release' \
      -DCMAKE_INSTALL_PREFIX='/usr' \
      -DCMAKE_LIBRARY_PATH='/usr/lib' \
      -DPLUGIN_DIR='/usr/lib/pcsx2' \
      -DGAMEINDEX_DIR='/usr/share/pcsx2' \
      -DDISABLE_ADVANCE_SIMD='TRUE' \
      -DEXTRA_PLUGINS='TRUE' \
      -DREBUILD_SHADER='TRUE' \
      -DGLSL_API='TRUE' \
      -DPACKAGE_MODE='TRUE' \
      -DXDG_STD='TRUE'
  elif [[ $ARCH == "amd64" ]]; then
    cmake .. \
      -DCMAKE_BUILD_TYPE='Release' \
      -DCMAKE_TOOLCHAIN_FILE='cmake/linux-compiler-i386-multilib.cmake' \
      -DCMAKE_INSTALL_PREFIX='/usr' \
      -DCMAKE_LIBRARY_PATH='/usr/lib32' \
      -DPLUGIN_DIR='/usr/lib32/pcsx2' \
      -DGAMEINDEX_DIR='/usr/share/pcsx2' \
      -DDISABLE_ADVANCE_SIMD='TRUE' \
      -DEXTRA_PLUGINS='TRUE' \
      -DREBUILD_SHADER='TRUE' \
      -DGLSL_API='TRUE' \
      -DPACKAGE_MODE='TRUE' \
      -DXDG_STD='TRUE'
  fi
}

m_install_pcsx2_src()
{
  
# start apt mode if check
if [[ "$apt_mode" == "install" ]]; then
  
  show_warning
  
  #################################################
  # Prerequisites
  #################################################
  
  # Handled by desktop-software.sh
  # Software list: cfgs/pcsx2-src-deps.txt 
  
  #################################################
  # Initial setup
  #################################################
  
  # set vars
  PKG="pcsx2"
  install_dir="/home/desktop/${PKG}-src"
  git_dir="/home/desktop/${PKG}-src/${PKG}"
  git_url="https://github.com/PCSX2/pcsx2"
  #export symlink_target="/usr/bin/pcsx2"
  #export binary_loc="$git_dir/pcsx2"
  
  ######################
  # set arch
  ######################
  
  ARCH=$(dpkg --print-architecture)
  
  # If git folder exists, evaluate it.
  # Avoiding a large download again is much desired.
  # If the DIR is already there, the fetch info should be intact
  
  # start git check if
  if [ -d "$git_dir" ]; then
  	
  	echo -e "\n==Info==\nGit folder already exists! Attempting git pull...\n"
  	sleep 1s
  	# attempt to pull the latest source first
  	cd $git_dir
  	# eval git status
  	output=$(git pull $git_url)
  
  	# evaluate git pull. Remove, create, and clone if it fails
  	# start git pull check
  	if [[ "$output" != "Already up-to-date." ]]; then
  		echo -e "\n==Info==\nGit directory pull failed. Removing and cloning...\n"
  		sleep 2s
  		cd
  		rm -rf "$git_dir"
  		mkdir -p "$install_dir"
  		cd "$install_dir"
  		# clone and fetch super build (evaluating currently)
  		git clone "$git_url"
  		cd "$git_dir"
  	fi
  	
 else
  	echo -e "\n==Info==\nGit directory does not exist. cloning now...\n"
  	sleep 2s
  	# create and clone
  	mkdir -p "$install_dir"
  	cd "$install_dir"
  	# clone and fetch
  	git clone "$git_url"
  	cd "$git_dir"

# end  git pull check
fi

  #################################################
  # Build $PKG
  #################################################
  
  echo -e "\n==> Building sources...please wait"
  sleep 2s
  
  ############################
  # proceed to global build:
  ############################

  # git dir evail check
  PKG_check=$(ls "$git_dir" 2> /dev/null)
  
  ############################
  # Begin $PKG build eval
  ############################
  
  # start $PKG build eval
  if [[ "$PKG_check" != "" ]]; then
  	
  	echo -e "\n==INFO=="
  	echo -e "It seems $PKG is already built in $git_dir"
  	echo -e "Would you like to rebuild [y], or [n]?\n"
  	
  	# the prompt sometimes likes to jump above sleep
  	sleep 0.5s
  	
  	# gather user input
  	read -ep "Choice: " user_input_PKG
  	
  	if [[ "$user_input_PKG" == "n" ]]; then
  		
  		echo -e "\n==> Skipping $PKG build...\n"
  		sleep 2s
  		
  	elif [[ "$user_input_PKG" == "y" ]]; then
  		
  		echo -e "\n==> Rebuilding $PKG...\n"
  		sleep 2s
  		
  		# build $PKG
	  	if [[ -d build_dir ]]; then
			rm -rf build_dir
			mkdir build_dir
		else
			mkdir build_dir
			cd build_dir 
		fi
		
		# set compiler flags and run cmake
	  	source_compiler_flags

		# make and install
  		make
  		sudo make install
      
  	else
  		
  		echo -e "\n==ERROR=="
  		echo -e "Invalid input, exiting...\n"
  		sleep 2s
  		exit
    fi 	
    
  else	
  	echo -e "\n$PKG does not appear to be built."
  	echo -e "Building now...\n"
  	sleep 2s
  	
  	# build $PKG
  	if [[ -d build_dir ]]; then
		rm -rf build_dir
		mkdir build_dir
	else
		mkdir build_dir
		cd build_dir 
	fi

	# set compiler flags and run cmake
  	source_compiler_flag

	# make and install
  	make
  	sudo make install
  	
  # end $PKG build eval
  fi

  ############################
  # Build
  ############################

  #################################################
  # Post install configuration
  #################################################
  
  # TODO
  
  #################################################
  # Cleanup
  #################################################
  
  # clean up dirs
  
  # note time ended
  time_end=$(date +%s)
  time_stamp_end=(`date +"%T"`)
  runtime=$(echo "scale=2; ($time_end-$time_start) / 60 " | bc)
  
  # output finish
  echo -e "\nTime started: ${time_stamp_start}"
  echo -e "Time started: ${time_stamp_end}"
  echo -e "Total Runtime (minutes): $runtime\n"
  
  
elif [[ "$apt_mode" == "remove" ]]; then
  
    #Remove directories, build files, etc if uninstall is specified by user
    echo -e "\n==> Removing related files for $PKG-src routine"
    sleep 2s
    
    # remove directories
    sudo rm -rf "$install_dir" "$git_dir" "$symlink_target"
  
# end apt mode if check  
fi

}
