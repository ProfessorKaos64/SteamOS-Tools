#!/bin/bash

# -------------------------------------------------------------------------------
# Author:     		Michael DeGuzis
# Git:		  	https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:		emu-from-source.sh
# Script Ver:	  	0.4.8
# Description:		script to install emulation softare as a 
#                 	part of install-debian-software.sh
#
#			See: https://wiki.debian.org/CreatePackageFromPPA
# Usage:	  	N/A, called from another script
#
<<<<<<< HEAD
#!/bin/bash

# -------------------------------------------------------------------------------
# Author:     		Michael DeGuzis
# Git:		  	https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:		emu-from-source.sh
# Script Ver:	  	0.4.8
# Description:		script to install emulation softare as a 
#                 	part of install-debian-software.sh
#
#			See: https://wiki.debian.org/CreatePackageFromPPA
# Usage:	  	N/A, called from another script
#
=======
>>>>>>> master
# Last tested:		Please see SteamOS-Tools/docs/Retroarch-info.md
# -------------------------------------------------------------------------------

time_start=$(date +%s)
time_stamp_start=(`date +"%T"`)

efs_main()
{
	
	#################################################
	# Initial setup
	#################################################
	
	# Warn user this will take some time
	echo -e "\nBuilding Retroarch and its associated cores will take some time. Please wait or \
press CTRL+C now. This is largely dependant on yoru CPU, HDD Speed, and RAM configuration."
	echo -e "\nPress Enter to continue\n"
	
	read -n 1 
	printf "\nContinuing...\n" 
	clear 

	# set vars
	export install_dir="/home/desktop/retroarch-src"
	export git_dir="/home/desktop/retroarch-src/libretro-super"
	export git_url="https://github.com/libretro/libretro-super"
	export symlink_target="/usr/bin/retroarch"
	export binary_loc="$git_dir/retroarch/retroarch"
	export core_loc="/usr/lib/libretro"
	
	# If git folder libretro-super exists, evaluate it
	# Avoiding a large download again is much desired.
	# If the DIR is already there, the fetch info should be intact
	if [[ -d "$git_dir" ]]; then
		
		echo -e "\nGit folder already exists! Attempting git pull...\n"
		sleep 1s
		# attempt to pull the latest source first
		cd $git_dir
		# eval git status
		output=$(git pull $git_url)

		# evaluate git pull. Remove, create, and clone if it fails
		if [[ "$output" != "Already up-to-date." ]]; then
			echo -e "\nGit directory pull failed. Removing and cloning...\n"
			sleep 2s
			cd
			rm -rf "$git_dir"
			mkdir -p "$install_dir"
			cd "$install_dir"
			# clone and fetch super build (evaluating currently)
			git clone "$git_url"
		fi
	else
		echo -e "\nGit directory does not exist. cloning now...\n"
		sleep 2s
		# create and clone
		mkdir -p "$install_dir"
		cd "$install_dir"
		# clone and fetch super build (evaluating currently)
		git clone "$git_url"
	fi
	
	# enter git dir if we are not already
	cd $git_dir
	
	#################################################
	# fetch information
	#################################################
	# See: https://github.com/libretro/libretro-super/blob/master/libretro-build.sh#L91
	
	echo -e "\n==> Fetching sources...please wait\n"
	sleep 2s
	
	############################
	# disabled fetches (games):
	############################
	
	sed -i -e 's|register_core "bsnes"|#register_core "bsnes"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "ffmpeg"|#register_core "ffmpeg"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "tyrquake"|#register_core "tyrquake"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "prboom"|#register_core "prboom"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "dinothawr"|#register_core "dinothawr"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "nxengine"|#register_core "nxengine"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "2048"|#register_core "2048"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "stonesoup"|#register_core "stonesoup"|g' "$git_dir/rules.d/core-rules.sh"
	sed -i -e 's|register_core "emux"|#register_core "emux"|g' "$git_dir/rules.d/core-rules.sh"
	
	############################
	# disabled fetches (extra):
	############################
	# These mostly include cores that fail to build later on
	
	sed -i -e 's|register_core "ffmpeg"|#register_core "ffmpeg"|g' "$git_dir/rules.d/core-rules.sh"
	
	############################
	# proceed to global fetch:
	############################
	
	# fetch cores
	./libretro-fetch.sh 
	
	#################################################
	# Build player and cores
	#################################################
	
	echo -e "\n==> Building sources...please wait"
	sleep 2s
	
	# Remove untested, broken, standalone games, or extra cores
	# Uncomment the below sed lines to build ALL cores
	
	############################
	# disabled cores:
	############################
	# These mostly include cores that fail to build
	
	sed -i -e '/libretro_build_core bsnes/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core bsnes_cplusplus98/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core bsnes_mercury/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core bnes/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core mame078/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core emux/d' "$git_dir/libretro-build.sh"
	sed -i -e '/build_libretro_test/d' "$git_dir/libretro-build.sh"

	############################
	# disabled extra:
	############################

	sed -i -e '/libretro_build_core ffmpeg/d' "$git_dir/libretro-build.sh"
	
	############################
	# disabled games:
	############################

	sed -i -e '/libretro_build_core tyrquake/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core prboom/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core dinothawr/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core nxengine/d' "$git_dir/libretro-build.sh"
	sed -i -e '/libretro_build_core 2048/d' "$git_dir/libretro-build.sh"
	
	############################
	# proceed to global build:
	############################
	
	# perform directory check for *.so (libretro cores) in
	# /usr/bin/libretro. These will be present if this module was
	# already ran before
	
	core_check=$(ls "/usr/lib/libretro" 2> /dev/null)
	retroarch_check=$(ls "$git_dir/retroarch")
	
	############################
	# Begin retroarch build eval
	############################
	
	if [[ "$retroarch_check" != "" ]]; then
		
		echo -e "\n==INFO=="
		echo -e "It seems Retorarch is already built in $git_dir/retroarch"
		echo -e "Would you like to rebuild [y], or [n]?\n"
		
		# the prompt sometimes likes to jump above sleep
		sleep 0.5s
		
		# gather user input
		read -ep "Choice: " user_input_retro
		
		if [[ "$user_input_retro" == "n" ]]; then
			echo -e "\n==> Skipping Retroarch build...\n"
			sleep 2s
		elif [[ "$user_input_retro" == "y" ]]; then
			echo -e "\n==> Rebuilding Retroarch...\n"
			sleep 2s
			# build Retroarch
			./retroarch-build.sh
		else
			echo -e "\n==ERROR=="
			echo -e "Invalid input, exiting...\n"
			sleep 2s
			exit
		fi
	else	
		echo -e "\nRetroarch does not appear to be built."
		echo -e "Building now...\n"
		sleep 2s
		# build Retroarch
		./retroarch-build.sh

	# end retroarch build eval
	fi

	############################
	# Begin core build eval
	###########################
	
	if [[ "$core_check" != "" ]]; then
		
		echo -e "\n==INFO=="
		echo -e "It seems the libretro cores are already built to $core_loc"
		echo -e "Would you like to rebuild [y], or [n]?\n"
		
		# the prompt sometimes likes to jump above sleep
		sleep 0.5s
		
		# gather user input
		read -ep "Choice: " user_input_core
		
		if [[ "$user_input_core" == "n" ]]; then
			echo -e "\n==> Skipping core builds...\n"
			sleep 2s
		elif [[ "$user_input_core" == "y" ]]; then
			echo -e "\n==> Rebuilding Libretro cores...\n"
			sleep 2s
			# build cores
			./libretro-build.sh
		else
			echo -e "\n==ERROR=="
			echo -e "Invalid input, exiting...\n"
			sleep 2s
			exit
		fi
	else	
		echo -e "\nLibretro cores do not appear to be built."
		echo -e "Building now..."
		sleep 2s
		# build cores
		./libretro-build.sh

	# end retroarch build eval
	fi
	
	#################################################
	# Post install configuration
	#################################################
	
	# handled after this script exits in
	# SteamOS-Tools/desktop-software.sh 
	# See: rpc_configure_retroarch

	#################################################
	# Cleanup
	#################################################
	
	# clean up dirs
	
	# note time ended
	time_end=$(date +%s)
	time_stamp_end=(`date +"%T"`)
    	runtime=$(echo "scale=2; ($time_end-$time_start) / 60 " | bc)
	
	# output finish
	echo -e "\nTime started: ${time_stamp_start}"
	echo -e "Time started: ${time_stamp_end}"
	echo -e "Total Runtime (minutes): $runtime\n"

	echo -e "\nProceeding to Retroarch/Libretro post-install configuration in...\n"
	# pause for a moment to allow user to see above stats
	echo -n "5 " && sleep 1s
	echo -n "4 " && sleep 1s
	echo -n "3 " && sleep 1s
	echo -n "2 " && sleep 1s
	echo -n "1" && sleep 1s
	echo ""
}
