#!/bin/bash

# -------------------------------------------------------------------------------
# Author:     		Michael DeGuzis
# Git:		    	https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:		retroarch_post_cfgs.shinc
# Script Ver:	  	0.7.5
# Description:		Performs post install cfgs of Retroarch
#
# -------------------------------------------------------------------------------

rpc_summary()
{
	
	echo -e "\n==> Completing post-install actions..."
	
	echo -e "\nPost install routine is now complete. Please add $shortcut"
	echo -e "as a non-Steam game in Big Picture Mode.\n"
	echo -e "Please see $scriptdir/docs/Retroarch-info.md for"
	echo -e "more information\n"
	sleep 1s
	
}

rpc_unload_retroarch()
{

	echo -e "\n==> Removing related files for retroach post-install configs"
	sleep 2s
	
	# confirm with user
	echo -e "\nDo you wish to remove configuration files related to Retroarch? [y/n]"

	# the prompt sometimes likes to jump above sleep 
	sleep 0.5s 

	# evaluate
	read -ep "Choice: " remove_confirm_config

	if [[ "$remove_confirm_config" == "n" ]]; then
		echo -e "\nKeeping configurtion files for Retroarch by user request."
	elif [[ "$remove_confirm_config" == "y" ]]; then
		# remove related files
		sudo rm -f "$retroarch_cfg_loc_steam" "$retroarch_cfg_loc_desktop"
	fi
	
	############################################################################
	#Remove ROM save files, etc if uninstall is specified by user
	############################################################################
	
	# confirm with user
	echo -e "\nDo youyou wish to remove your ROM save files related to Retroarch? [y/n]"

	# the prompt sometimes likes to jump above sleep 
	sleep 0.5s 

	# evaluate
	read -ep "Choice: " remove_confirm_saves

	if [[ "$remove_confirm_saves" == "n" ]]; then
		echo -e "\nKeeping ROM save files for Retroarch by user request."
	elif [[ "$remove_confirm_saves" == "y" ]]; then
		# remove related files
		sudo rm -f "$save_loc_desktop" "$save_loc_steam"
		sudo rm -f "$save_loc_desktop" "$save_loc_steam"
	fi
	
}

rpc_configure_common()
{

	if [[ "$apt_mode" == "install" ]]; then

		#################################################
		# Set paths and VARs
		#################################################
		echo -e "\n==> Configuring common paths"
		sleep 1s
		
		# home paths
		steam_home="/home/steam"
		desktop_home="/home/desktop"
		
		# save DIRs
		save_loc_desktop="/home/desktop/retroarch/saves"
		save_loc_steam="/home/steam/retroarch/saves"
		
		# the retroarch config file needs to be placed in the steam users dir so that
		# the running retroarch application can access it freely while steamcompmgr is running
		retroarch_cfg_loc_steam="/home/steam/.config/retroarch"
		retroarch_cfg_loc_desktop="/home/desktop/.config/retroarch"
		
		# other directories
		roms_dir_desktop="/home/desktop/ROMs"
		roms_dir_steam="/home/steam/ROMs"
		banner_dir_desktop="/home/desktop/Pictures"
		banner_dir_steam="/home/steam/Pictures"
		
		pathlist=()
		
		# Create all our base directories set above
		pathlist+=("$save_loc_desktop")
		pathlist+=("$save_loc_steam")
		pathlist+=("$retroarch_cfg_loc_steam")
		pathlist+=("$retroarch_cfg_loc_desktop")
		pathlist+=("$roms_dir_desktop")
		# This below path will be symlinked to the desktop ROMs DIR
		# pathlist+=("$roms_dir_steam")
		pathlist+=("$banner_dir_desktop")
		pathlist+=("$banner_dir_steam")
		
		# quotes needed on entry to preven globbing on directory creation!
		# Permissions will be corrected later on below.
		# Expanding arrays involves [@] and {}
		for entry in "${pathlist[@]}"
		do
			if [[ ! -d "$entry" ]]; then
				sudo mkdir -p "$entry" 
			fi
		done
		
		# Symlink the desktop ROMs directory to /home/steam/ROMs 
		# so Retroarch can see it easily
		

		# reset or creatw symbolic link
		if [[ -L "$roms_dir_steam" ]]; then

			#remove existing link and recreate
			sudo rm -f "$roms_dir_steam"
			sudo ln -s "$roms_dir_desktop" "$roms_dir_steam"

		elif [[ -d "$roms_dir_steam" ]]; then

			echo -e "\n==ERROR==\nTarget symlink location taken. Failed to link to desktop ROMs directory!"

		fi
		#################################################
		# Application parameters 
		#################################################
		
		echo -e "\n==> Configuring Retorarch parameters..."
		sleep 2s
		
		# send notice that gamepads are now autoconfigured
		cat <<- EOF
		
		==INFO==
		Notice: Gamepad configurations are automatic via the 'retroarch-joypad-autoconfig'
		or sourced directly from the below link for source builds of Retroarch.
		https://github.com/libretro/retroarch-joypad-autoconfig/tree/master/udev

		EOF
		sleep 3s
		
		# Add default retroarch config file with our paths
		# "default" modified retroarch.cfg to user DIRs without gamepad config
		cp "$scriptdir/cfgs/retroarch/retroarch.cfg" "$retroarch_cfg_loc_desktop/retroarch.cfg"
		sudo cp "$scriptdir/cfgs/retroarch/retroarch.cfg" "$retroarch_cfg_loc_steam/retroarch.cfg"
		
		# Swap home_temp out for each user DIR path
		
		# We will use the desktop user here so that there are no permission struggles when
		# Adding ROMs with the normal desktop user, and the Steam user should be able to see/read the ROMs

		sed -i "s|home_temp|$desktop_home|g" "$retroarch_cfg_loc_desktop/retroarch.cfg"
		sudo sed -i "s|home_temp|$desktop_home|g" "$retroarch_cfg_loc_steam/retroarch.cfg"
		
		# copy shortcut based on the software type used
		if [[ "$type" == "retroarch-src" ]]; then
			
			# create desktop application link 
			sudo cp "$scriptdir/cfgs/desktop-files/retroarch-src.desktop" "/usr/share/applications"
			
			# set shortcut name for end summary
			shortcut="retroarch-src"

		elif [[ "$type" == "retroarch" ]]; then
			
			# create desktop application link 
			sudo cp "$scriptdir/cfgs/desktop-files/retroarch.desktop" "/usr/share/applications"
			
			# set shortcut name for end summary
			shortcut="retroarch"
			
		fi
		
		# copy banner images
		
		# Regular Retroarch
		cp "$scriptdir/artwork/banners/retro-arch-logo.png" "$banner_dir_desktop"
		sudo cp "$scriptdir/artwork/banners/retro-arch-logo.png" "$banner_dir_steam"
		
		# Retroarch built from source
		cp "$scriptdir/artwork/banners/retro-arch-src-logo.png" "$banner_dir_desktop"
		sudo cp "$scriptdir/artwork/banners/retro-arch-src-logo.png" "$banner_dir_steam"
		
		#################################################
		# Cleanup
		#################################################
		
		echo -e "\n==> Correcting owners and permissions"
		sleep 2s
		
		# correct recursively to touch all our directories
		sudo chown -R desktop:desktop "$retroarch_cfg_loc_desktop"
		sudo chown -R steam:steam "$retroarch_cfg_loc_steam"
		
		# other non specific DIRs
		sudo chown -R desktop:desktop "$banner_dir_desktop"
		sudo chown -R steam:steam "$banner_dir_steam"
		sudo chown -R desktop:desktop "$roms_dir_desktop"
		sudo chown -R steam:steam "$roms_dir_steam"

	elif [[ "$apt_mode" == "remove" ]]; then
	
		#Remove directories, build files, etc if uninstall is specified by user
		# fire off common removal function
		rpc_unload_retroarch
	
	fi

}

rpc_configure_src()
{
		
	if [[ "$apt_mode" == "install" ]]; then
	
		# Vars exported emu-from-source.shinc
		#echo "install_dir is $install_dir"
		#echo "git_dir is $git_dir"
		#echo "git_url is $git_url"
		#echo "symlink_target is $symlink_target"
		#echo "binary_loc is $binary_loc"
		#echo "core location is $core_loc"
	
		#################################################
		# configurations for Retroarch or libretro 
		#################################################
		
		echo -e "\n==> Linking Retroarch to $symlink_target"
		sleep 2s
		
		# Run common configuration
		# This is a piece that both the source build and the package
		# implementation share
		rpc_configure_common
		
		#################################################
		# Linking
		#################################################
		
		# remove old symlink
		sudo rm -f "$symlink_target"
		# symlink 'retrarch' for now until build flags are implemented
		sudo ln -s "$binary_loc" "$symlink_target"
		
		#################################################
		# Set paths and VARs
		#################################################
		
		echo -e "\n==> Configuring additional paths for source build"
		sleep 1s
		
		# cores
		core_loc="/usr/lib/libretro"
		core_info_dir="/usr/share/libretro/info/"
		
		# base Retorach home dir
		retroarch_base_desktop="/home/desktop/retroarch"
		retroarch_base_steam="/home/steam/retroarch"
		
		# input
		retroarch_input_dir="/usr/share/libretro/autoconfig"
		
		# filters
		retroarch_filters="/usr/lib/retroarch/filters/video/"
		
		# shaders
		retroarch_shaders="/usr/share/libretro/shaders/"
		
		# game history
		hist_loc_desktop="/home/desktop/retroarch/history"
		hist_loc_steam="/home/steam/retroarch/history"
		
		#################################################
		# Directories 
		#################################################
		
		# create retroarch dirs if they don't exist already
		# We pass -p below,so all folders below are created for a given path
	
		pathlist=()
		
		# base directories
		pathlist+=("$retroarch_base_desktop")
		pathlist+=("$retroarch_base_steam")
		pathlist+=("$core_loc")
		pathlist+=("$core_info_dir")
		pathlist+=("$retroarch_filters")
		pathlist+=("$retroarch_shaders")
		pathlist+=("$hist_loc_desktop")
		pathlist+=("$hist_loc_steam")
		pathlist+=("$retroarch_input_dir")
		
		# quotes needed on entry to preven globbing on directory creation!
		# Permissions will be corrected later on below.
		# Expanding arrays involves [@] and {}
		for entry in "${pathlist[@]}"
		do
			if [[ ! -d "$entry" ]]; then
				sudo mkdir -p "$entry" 
			fi
		done
		
		##################################
		# download and extract shaders
		##################################
		echo -e "\n==> Fetchng shaders from Libretro (Git)\n"
		sleep 1s
		
		wget -P /tmp "https://github.com/libretro/common-shaders/archive/master.zip"
		# extract
		unzip -o "/tmp/master.zip" -d "/tmp"
		# distribute shaders
		cp -r "/tmp/common-shaders-master/." "$retroarch_shaders_desktop"
		sudo cp -r "/tmp/common-shaders-master/." "$retroarch_shaders_steam"
		# remove tmp file
		rm -f "/tmp/master.zip"
		
		####################################################################
		# download and extract joypad auto configuration files from git
		####################################################################
		echo -e "\n==> Fetchng joypad profiles from libretro/retroarch-joypad-autoconfig (Git)\n"
		sleep 1s
		
		wget -P /tmp "https://github.com/libretro/retroarch-joypad-autoconfig/archive/master.zip"
		# extract
		unzip -o "/tmp/master.zip" -d "/tmp"
		# distribute shaders
		sudo cp -r "/tmp/retroarch-joypad-autoconfig-master/udev/." "$retroarch_input_dir"
		# remove tmp file
		rm -f "/tmp/master.zip"
		
		# add small launcher script
		# this will acively swap out the current user (desktop or steam) so that the
		# appropriate retroarch.cfg file will be user
		sudo cp "$scriptdir/cfgs/retroarch/retroarch-launch.sh" "/usr/bin"
		
		# copy cores from source build DIR
		find "/home/desktop/retroarch-src/libretro-super/" -name *.so | xargs sudo cp -t "/usr/lib/libretro" 2> /dev/null
		
		# copy core info from source build DIR
		find "/home/desktop/retroarch-src/libretro-super/dist/info" -name *.info | xargs sudo cp -t "/usr/lib/libretro/info" 2> /dev/null
		
		# copy filter info from source build DIR
		find "/home/desktop/retroarch-src/libretro-super" -name *.filters | xargs sudo cp -t "$retroarch_filters_desktop" 2> /dev/null
		find "/home/desktop/retroarch-src/libretro-super" -name *.filters | xargs sudo cp -t "$retroarch_filters_steam" 2> /dev/null
		
		# fix/correct permissions to our extra directories for the source build
		sudo chown -R desktop:desktop "$retroarch_filters"
		sudo chown -R steam:steam "$retroarch_shaders"
		
		sudo chown -R desktop:desktop "$retroarch_base_desktop"
		sudo chown -R desktop:desktop "$hist_loc_desktop"
		
		sudo chown -R steam:steam "$retroarch_base_steam"
		sudo chown -R steam:steam "$hist_loc_steam"
		
		#################################################
		# Automatically add Retroarch program into Steam?
		#################################################
		
		# May not be possible
		# If not, generate notice to user to add as "non-Steam game"
		# <<TODO>>
	
		# go to summary
		rpc_summary
	
	elif [[ "$apt_mode" == "remove" ]]; then
		
		#Remove directories, build files, etc if uninstall is specified by user
		# fire off common removal function
		rpc_unload_retroarch
		
	fi
}
